{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/palakjain/Robos/src/App.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from './CardList';\nimport SearchBox from './SearchBox';\nimport Scroll from './Scroll';\nimport errorBoundary from './errorBoundary';\nimport { setSearchFeild, requestRobots } from './actions';\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: event => dispatch(setSearchFeild(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  };\n}; //class App extends Component {\n//constructor() {\n// super()\n//this.state = {\n//robots: [] \n// searchfield: ''\n//}\n//}\n// componentDidMount(){\n//   fetch('https://jsonplaceholder.typicode.com/users')\n//   .then(response =>{\n//     return response.json();\n//   })\n//   .then(users =>{\n//     this.setState({robots: users})\n//   })\n//}\n//onSearchChange = (event) => {\n//this.setState({ searchfield: event.target.value })\n//}\n//     render() {\n//         const {searchField, onSearchChange } = this.props;\n//       const filteredRobots = this.state.robots.filter(robots => {\n//         return robots.name.toLowerCase().includes(searchField.toLowerCase())\n//           } \n//          );\n// if(this.state.robots.length===0){\n//   return <h1>loading</h1>\n// } else{\n\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const {\n      robots,\n      searchField,\n      onSearchChange,\n      isPending\n    } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tc\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"ROBOFRIENDS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(SearchBox, {\n        searchChange: onSearchChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Scroll, {\n        children: /*#__PURE__*/_jsxDEV(\"errorBoundary\", {\n          children: /*#__PURE__*/_jsxDEV(CardList, {\n            robots: filteredRobots\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this);\n  }\n\n} //export default App;\n// action done from mapDispatchToProps will channge state from mapStateToProps\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App); //instead of using if /else we can also use ternary operator.\n// rather than using this.state everytime we can say:\n//const {robots, searchfield } = this.state;","map":{"version":3,"sources":["/home/palakjain/Robos/src/App.js"],"names":["React","Component","connect","CardList","SearchBox","Scroll","errorBoundary","setSearchFeild","requestRobots","mapStateToProps","state","searchField","searchRobots","robots","isPending","mapDispatchToProps","dispatch","onSearchChange","event","target","value","onRequestRobots","App","componentDidMount","props","render","filteredRobots","filter","robot","name","toLowerCase","includes"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAAQC,cAAR,EAAyBC,aAAzB,QAA8C,WAA9C;;AAGA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLC,IAAAA,WAAW,EAAED,KAAK,CAACE,YAAN,CAAmBD,WAD3B;AAELE,IAAAA,MAAM,EAAEH,KAAK,CAACF,aAAN,CAAoBK,MAFvB;AAGLC,IAAAA,SAAS,EAAEJ,KAAK,CAACF,aAAN,CAAoBM;AAH1B,GAAP;AAKD,CAND;;AAQA,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLC,IAAAA,cAAc,EAAGC,KAAD,IAAWF,QAAQ,CAACT,cAAc,CAACW,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf,CAD9B;AAELC,IAAAA,eAAe,EAAE,MAAML,QAAQ,CAACR,aAAa,EAAd;AAF1B,GAAP;AAID,CALD,C,CAOA;AACE;AACC;AACC;AACE;AACD;AACD;AACF;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEI;AACI;AACJ;AAEN;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMc,GAAN,SAAkBrB,SAAlB,CAA4B;AAC1BsB,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,KAAL,CAAWH,eAAX;AACD;;AAEDI,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEZ,MAAAA,MAAF;AAAUF,MAAAA,WAAV;AAAuBM,MAAAA,cAAvB;AAAuCH,MAAAA;AAAvC,QAAqD,KAAKU,KAAhE;AACA,UAAME,cAAc,GAAGb,MAAM,CAACc,MAAP,CAAcC,KAAK,IAAI;AAC5C,aAAOA,KAAK,CAACC,IAAN,CAAWC,WAAX,GAAyBC,QAAzB,CAAkCpB,WAAW,CAACmB,WAAZ,EAAlC,CAAP;AACD,KAFsB,CAAvB;AAIA,wBACE;AAAK,MAAA,SAAS,EAAE,IAAhB;AAAA,8BACA;AAAA,+BAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,cADA,eAEA,QAAC,SAAD;AAAW,QAAA,YAAY,EAAEb;AAAzB;AAAA;AAAA;AAAA;AAAA,cAFA,eAGA,QAAC,MAAD;AAAA,+BACA;AAAA,iCACA,QAAC,QAAD;AAAU,YAAA,MAAM,EAAES;AAAlB;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cAHA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAYA;;AAvBwB,C,CA0B5B;AACA;;;AACA,eAAexB,OAAO,CAACO,eAAD,EAAkBM,kBAAlB,CAAP,CAA6CO,GAA7C,CAAf,C,CAEA;AACA;AACA","sourcesContent":["import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport CardList from './CardList';\nimport SearchBox from './SearchBox';\nimport Scroll from './Scroll';\nimport errorBoundary from './errorBoundary';\nimport {setSearchFeild,  requestRobots } from './actions';\n\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchFeild(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\n//class App extends Component {\n  //constructor() {\n   // super()\n    //this.state = {\n      //robots: [] \n     // searchfield: ''\n    //}\n  //}\n\n  // componentDidMount(){\n  //   fetch('https://jsonplaceholder.typicode.com/users')\n  //   .then(response =>{\n  //     return response.json();\n  //   })\n  //   .then(users =>{\n  //     this.setState({robots: users})\n  //   })\n    \n    \n  //}\n\n      //onSearchChange = (event) => {\n          //this.setState({ searchfield: event.target.value })\n      //}\n\n//     render() {\n//         const {searchField, onSearchChange } = this.props;\n\n//       const filteredRobots = this.state.robots.filter(robots => {\n//         return robots.name.toLowerCase().includes(searchField.toLowerCase())\n//           } \n//          );\n// if(this.state.robots.length===0){\n//   return <h1>loading</h1>\n// } else{\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { robots, searchField, onSearchChange, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    \n    return( \n      <div className ='tc'>\n      <h1><b>ROBOFRIENDS</b></h1>\n      <SearchBox searchChange={onSearchChange}/>\n      <Scroll>\n      <errorBoundary>\n      <CardList robots={filteredRobots} />\n      </errorBoundary>\n      </Scroll>\n      </div>\n    );\n\n   }   \n  }\n\n//export default App;\n// action done from mapDispatchToProps will channge state from mapStateToProps\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n\n//instead of using if /else we can also use ternary operator.\n// rather than using this.state everytime we can say:\n//const {robots, searchfield } = this.state;"]},"metadata":{},"sourceType":"module"}