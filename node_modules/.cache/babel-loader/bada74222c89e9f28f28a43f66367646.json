{"ast":null,"code":"import { apiCall } from './api/api';\nimport { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants'; // export const setSearchFeild =(text) => ({\n// \ttype: CHANGE_SEARCH_FEILD,\n// \tpayload: text\n// })\n\nexport const setSearchFeild = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\nexport const requestRobots = () => dispatch => {\n  dispatch({\n    type: REQUEST_ROBOTS_PENDING\n  });\n  apiCall('https://jsonplaceholder.typicode.com/users').then(data => dispatch({\n    type: REQUEST_ROBOTS_SUCCESS,\n    payload: data\n  })).catch(error => dispatch({\n    type: REQUEST_ROBOTS_FAILED,\n    payload: error\n  }));\n};","map":{"version":3,"sources":["/home/palakjain/Robos/src/actions.js"],"names":["apiCall","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","setSearchFeild","text","type","payload","requestRobots","dispatch","then","data","catch","error"],"mappings":"AACA,SAASA,OAAT,QAAwB,WAAxB;AACA,SACEC,mBADF,EAEEC,sBAFF,EAGEC,sBAHF,EAIEC,qBAJF,QAKQ,aALR,C,CAOA;AACA;AACA;AACA;;AAIC,OAAO,MAAMC,cAAc,GAAIC,IAAD,KAAW;AAAEC,EAAAA,IAAI,EAAEN,mBAAR;AAA6BO,EAAAA,OAAO,EAAEF;AAAtC,CAAX,CAAvB;AAER,OAAO,MAAMG,aAAa,GAAG,MAAOC,QAAD,IAAc;AAC/CA,EAAAA,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEL;AAAR,GAAD,CAAR;AACCF,EAAAA,OAAO,CAAC,4CAAD,CAAP,CACEW,IADF,CACOC,IAAI,IAAIF,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEJ,sBAAR;AAAgCK,IAAAA,OAAO,EAAEI;AAAzC,GAAD,CADvB,EAEEC,KAFF,CAEQC,KAAK,IAAIJ,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEH,qBAAR;AAA+BI,IAAAA,OAAO,EAAEM;AAAxC,GAAD,CAFzB;AAGF,CALM","sourcesContent":["\r\nimport { apiCall } from './api/api'\r\nimport {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n } from './constants'\r\n\r\n// export const setSearchFeild =(text) => ({\r\n// \ttype: CHANGE_SEARCH_FEILD,\r\n// \tpayload: text\r\n// })\r\n\r\n\r\n\r\n export const setSearchFeild = (text) => ({ type: CHANGE_SEARCH_FIELD, payload: text })\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING })\r\n   apiCall('https://jsonplaceholder.typicode.com/users')\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}"]},"metadata":{},"sourceType":"module"}